#!/usr/bin/env python
import math
import optparse
import sys
from collections import defaultdict, OrderedDict

EQ_PROB = .85
NULL_PROB = .075
LAMBDA = 4.0

def h(i, j, m, n):
    return -abs(float(i)/m - float(j)/n)

def find_neighbors(x, y, x_upper, y_upper):
    neighbors = []
    for i in range(-1, 2):
        if x + i < 0 or x + i >= x_upper:
            continue
        for j in range(-1, 2):
            if y + j < 0 or y + j > y_upper or (i == 0 and j == 0):
                continue
            neighbors.append((x + i, y + j))

    return neighbors

def model(bitext, iterations):
  # Initialize uniform translation probabilities
  wordset = set()
  for (n, (g, e)) in enumerate(bitext):
      for j in range(len(e)):
          wordset.add(e[j])

  uniform_prob = 1.0/len(wordset)

  prob = defaultdict(float)

  for (n, (g, e)) in enumerate(bitext):
      for i in range(len(g)):
          for j in range(len(e)):
              prob[e[j], g[i]] = uniform_prob

  # EM
  for it in range(iterations):
      count = defaultdict(float)
      exp_norm = defaultdict(float)
      prob_norm = defaultdict(float)
      align = defaultdict(float)
      align_norm = defaultdict(float)
      dict_align = defaultdict(float)
      dict_norm = defaultdict(float)

      for (n, (g, e)) in enumerate(bitext):
          # Normalization for expectations and alignment probabilities
          for j in range(len(e)):
              exp_norm[e[j]] = 0
              align_norm[e[j]] = 0
              dict_norm[e[j]] = 0
              for i in range(len(g)):
                  exp_norm[e[j]] += prob[e[j], g[i]]
                  align[e[j], g[i]] = math.exp(LAMBDA * h(j, i, len(e), len(g)))
                  align_norm[e[j]] += math.exp(LAMBDA * h(j, i, len(e), len(g)))

          for j in range(len(e)):
              r = math.exp(-LAMBDA/len(g))
              for i in range(len(g)):
                  # Alignment probabilities based on proximity to diagonal
                  if i == 0:
                      align_prob = NULL_PROB
                  else:
                      align_prob = (1 - NULL_PROB) * align[e[j], g[i]]/align_norm[e[j]]

                  # Alignment with equal strings
                  if e[j].lower() == g[i].lower():
                      eq_align_prob = EQ_PROB
                  else:
                      eq_align_prob = 1 - EQ_PROB

                  # Expected number of times g word was aligned to e word
                  count[e[j], g[i]] += eq_align_prob * align_prob * prob[e[j], g[i]]/exp_norm[e[j]]
                  # Expected number of times g word was used as a translation source
                  prob_norm[g[i]] += eq_align_prob * align_prob * prob[e[j], g[i]]/exp_norm[e[j]]

      for (n, (g, e)) in enumerate(bitext):
          for i in range(len(g)):
              for j in range(len(e)):
                  prob[e[j], g[i]] = count[e[j], g[i]]/prob_norm[g[i]]

  alignments = []
  for (n, (g, e)) in enumerate(bitext):
      alignments.append(OrderedDict())
      for j in range(len(e)):
          max_prob = 0
          max_index = 0
          for i in range(len(g)):
              if prob[e[j], g[i]] > max_prob:
                  max_prob = prob[e[j], g[i]]
                  max_index = i

          alignments[n][(max_index, j)] = max_prob
  return alignments
    
def main():
    optparser = optparse.OptionParser()
    optparser.add_option("-b", "--bitext", dest="bitext",
        default="data/dev-test-train.de-en",
        help="Parallel corpus (default data/dev-test-train.de-en)")
    optparser.add_option("-a", "--alignments", dest="alignment",
        default="data/dev.align",
        help="Gold alignments filename (default=data/dev.align)")
    optparser.add_option("-t", "--training", dest="training",
        default="data/dev-test-train.de-en",
        help="Training parallel corpus (default data/dev-test/train.de-en)")
    optparser.add_option("-i", "--iterations", dest="iterations", default=7,
        type="int", help="Number of iterations to run EM (default=6)")
    optparser.add_option("-n", "--num_sentences", dest="num_sents",
        default=sys.maxint, type="int",
        help="Number of sentences to use for training and alignment")
    (opts, _) = optparser.parse_args()

    sys.stderr.write("Training...\n")

    forward = [[sentence.strip().split() for sentence in pair.split(' ||| ')] for pair in open(opts.bitext)][:opts.num_sents]
    reverse = [[t[1], t[0]] for t in forward]

    forward_align = model(forward, opts.iterations)
    reverse_align = model(reverse, opts.iterations)

    alignments = []
    for n in range(len(forward_align)):
        forward_set = set(forward_align[n].keys())
        reverse_set = set((t[1], t[0]) for t in reverse_align[n].keys())
        intersection = dict((t[1], t[0]) for t in list(forward_set.intersection(reverse_set)))
        union = forward_set.union(reverse_set)

        alignments.append([])

        prev = -1
        for i in range(len(forward_align[n])):
            if i in intersection:
                # Symmetrize
                alignments[n].append((intersection[i], i))

                # Diagonal grow-1
                if prev >= 0:
                    y_delta = i - prev
                    x_delta = intersection[i] - intersection[prev]
                    if x_delta == y_delta and x_delta > 1:
                        for j in range(1, x_delta):
                            alignments[n].append((intersection[prev] + j, prev + j))
                prev = i

                # Diagonal grow-2
                neighbors = find_neighbors(intersection[i], i,
                    len(reverse_align[n]), len(forward_align[n]))
                for (x, y) in neighbors:
                    if (x, y) in union and not y in intersection:
                        alignments[n].append((x, y))

        alignments[n] = sorted(list(set(alignments[n])))

        if not (len(reverse_align[n]) - 1, len(forward_align[n]) - 1) in alignments[n]:
            alignments[n].append((len(reverse_align[n]) - 1, len(forward_align[n]) - 1))

    for i in range(len(alignments)):
        for (j, k) in alignments[i]:
            sys.stdout.write("%i-%i " % (j, k))
        sys.stdout.write("\n")

if __name__ == "__main__": main()
